<!doctype html>
<html>
<head>
	<meta charset="utf-8" />
	<title>CloudView LAS Viewer</title>
	<link rel="stylesheet" type="text/css" href="style.css">
</head>
<body>
	<div id="container"></div>
	<div id="input">
		<div class="input-group">
			<input type="file" id="file-input">
		</div>
		<!--<div class="input-group">
			<input type="text" id="url-input"><input type="button" id="url-cmd" value="Load URL">
		</div>
		<div class="input-group"><span style="margin-left:4px;color:#aaa">Samples:</span>
			<input type="button" id="sample1" value="City.las" 
			/><input type="button" id="sample2" value="Stadium.las" />
		</div>-->
	</div>
	<div id="loader">Loading...</div>
	<div id="info"><pre id="info-text"></pre></div>
	<div id="header"><pre id="header-text"></pre></div>
	<div id="status"><pre id="status-text"></pre></div>
	<div id="ramp"></div>
	
	<script type="x-shader/x-vertex" id="vertexshader3">
		precision mediump float;
		
		uniform float size;
		attribute vec3 color;
		varying vec3 vColor;

		void main() {
			gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
			gl_PointSize = size;
			//vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );
			//gl_Position = projectionMatrix * mvPosition;
			//gl_PointSize = size * ( 300.0 / length( mvPosition.xyz ) )/3.0;
			vColor = color;
		}
	</script>
	
	<script type="x-shader/x-vertex" id="vertexshader2">
		precision mediump float;
		precision lowp sampler2D;

		uniform float size;
		uniform sampler2D texture;
		uniform float zmin;
		uniform float zscale;
		varying vec3 vColor;
		
		void main() {
			gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
			gl_PointSize = size;
			vColor = texture2D(texture, vec2(0, (position.z - zmin) * zscale)).xyz;
		}
	</script>

	<script type="x-shader/x-vertex" id="vertexshader">
		precision mediump float;
		
		uniform float size;
		attribute float color;
		varying vec3 vColor;
		
		vec3 unpackColor(float f) {
			vec3 color;
			color.b = floor(f / 256.0 / 256.0);
			color.g = floor((f - color.b * 256.0 * 256.0) / 256.0);
			color.r = floor(f - color.b * 256.0 * 256.0 - color.g * 256.0);
			// normalize
			return color / 256.0;
		}

		void main() {
			gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
			gl_PointSize = size;
			vColor = unpackColor(color);
		}
	</script>

	<script type="x-shader/x-fragment" id="fragmentshader">
		varying vec3 vColor;
		
		void main() {
			gl_FragColor = vec4(vColor, 1.0);
		}
	</script>

	<!--
	<script type="x-shader/x-vertex" id="vertexShader1" src="shader1.vert"></script>
	<script type="x-shader/x-vertex" id="vertexShader2" src="shader2.vert"></script>
	<script type="x-shader/x-vertex" id="vertexShader3" src="shader3.vert"></script>
	<script type="x-shader/x-fragment" id="fragmentShader" src="shader.frag"></script>
	-->
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.0/jquery.min.js"></script>
	<script src="js/libs/three.js/three.min.js"></script>
	<script src="js/libs/stats.min.js"></script>
    <script src="js/libs/dat.gui.min.js"></script>

	<script src="js/libs/three.js/controls/OrbitControls.js"></script>
	<script src="js/libs/three.js/controls/TrackballControls.js"></script>
	<script src="js/libs/three.js/controls/FlyControls.js"></script>
	
	<script src="js/util.js"></script>
	<script src="js/ColorRamp.js"></script>
	<script src="js/Stretch.js"></script>
	<script src="js/IntervalMap.js"></script>
	<script src="js/CachedColorMap.js"></script>
	<script src="js/BinaryReader.js"></script>
	<script src="js/Statistics.js"></script>
	<script src="js/SQuantization3D.js"></script>
	<script src="js/LASHeader.js"></script>
	<script src="js/PointCloudTileDensity.js"></script>
	<script src="js/PointCloudTile.js"></script>
	<script src="js/PointCloudTileSet.js"></script>
	<script src="js/Viewport3D.js"></script>
	<script src="js/LASInfo.js"></script>
	<script src="js/Scene.js"></script>
</body>
</html>